---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by momo.
--- DateTime: 2019/5/20 上午11:31
--- 版本号 每次修改完内容后需要自动增加版本号/或者保证不会影响老版本
--- @version 1.0

local _class = {}
_class._version = '0.0.1'
_class._classname = 'MLSwitch'
_class._type = 'ui'
_class._mlnui_autoadd = true

function MLSwitch()
    return _class:new()
end

function _class:new(o)
    o = o or {}
    setmetatable(o, self)
    self.__index = self
    o:init()
    return o
end

function _class:init()
    if self.vWidth == nil then
        self.vWidth = 51
    end
    if self.vHeight == nil then
        self.vHeight = 31
    end
    
    if self.padding == nil then
        self.padding = 2
    end
    
    if self.contentView == nil then
        self.contentView = View():width(self.vWidth):height(self.vHeight):cornerRadius(31 / 2.0)
        self.normalColor = Color(238, 237, 237, 1)
        self.selectedColor = Color(94, 178, 244, 1)
    end
    
    if self.thumbView == nil then
        self.thumbView = View():width(self.vHeight - self.padding * 2):height(self.vHeight - self.padding * 2):marginTop(self.padding):cornerRadius((self.vHeight - self.padding * 2) / 2.0)
        self.thumbView:bgColor(Color(255, 255, 255, 1.0))
        self.contentView:addView(self.thumbView)
        self.thumbView:enabled(false)
    end
    
    self.isOn = false
    
    self:setupWithStatus()
    
    self.contentView:onClick(self:onClick())
end

--设置宽度和高度,默认51，31
function _class:layoutWithSize(size)
    self.vWidth = size:width()
    self.vHeight = size:height()
    self.contentView:width(self.vWidth):height(self.vHeight)
    self.thumbView:width(self.vHeight - self.padding * 2):height(self.vHeight - 4):marginTop(self.padding)
    self.contentView:cornerRadius(self.vHeight / 2.0)
    self.thumbView:cornerRadius((self.vHeight - self.padding * 2) / 2.0)
    self:setupWithStatus()
    self.contentView:onClick(self:onClick())
end

function _class:onClick()
    local func = function()
        if self.animating ~= true then
            self.isOn = (self.isOn ~= true)
            self:setupWithStatus()
            if self.switchChangedCallback ~= nil then
                self.switchChangedCallback(self.isOn)
            end
        end
    end
    return func
end

--设置状态改变后的回调
function _class:setSwitchChangedCallback(callback)
    self.switchChangedCallback = callback
end

--修改当前选中状态，如果业务不需要在设置后触发回调，请删除其中的触发写法
function _class:on(isOn)
    self.isOn = isOn
    self:setupWithStatus()
    if self.switchChangedCallback ~= nil then
        self.switchChangedCallback(isOn)
    end
end

function _class:setNormalColor(color)
    self.normalColor = color
    self:setupWithStatus()
end

function _class:setSelectedColor(color)
    self.selectedColor = color
    self:setupWithStatus()
end

function _class:setThumbColor(color)
    self.thumbView:bgColor(color)
end

--处理状态和位置
function _class:setupWithStatus()
    local anim = FrameAnimation()
    anim:setDuration(0.15)
    if self.isOn then
        anim:setTranslateXTo(self.vWidth - self.vHeight + self.padding)
        self.contentView:bgColor(self.selectedColor)
    else
        anim:setTranslateXTo(self.padding)
        self.contentView:bgColor(self.normalColor)
    end
    anim:setEndCallback(function()
        self.animating = false
    end)
    anim:start(self.thumbView)
    self.animating = true
end

function _class:marginTop(top)
    self.contentView:marginTop(top)
    return self
end

function _class:marginLeft(left)
    self.contentView:marginLeft(left)
    return self
end

function _class:setGravity(gravity)
    self.contentView:setGravity(gravity)
    return self
end

function _class:width(width)
    self:layoutWithSize(Size(width, self.vHeight))
    return self
end

function _class:height(height)
    self:layoutWithSize(Size(self.vWidth, height))
    return self
end

return _class
