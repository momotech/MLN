---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by momo.
--- DateTime: 2020/9/4 7:00 下午
--- 版本号 每次修改完内容后需要自动增加版本号/或者保证不会影响老版本
--- @version 1.0

local _class = {
    _type = 'ui',
    _version = '1.2',
    _classname = 'Navigator'
}
_class._pageStack = {}--页面栈

local function weak_table()
    return setmetatable({}, {__mode = "k"})
end

_class._willPushCache = weak_table()
_class._didPushCache = weak_table()
_class._willPopCache = weak_table()
_class._didPopCache = weak_table()

-------------
--- @Public
-------------

Navigator = _class

--- 推出新页面
function _class:pushPage(page)
    local index = self:indexOfPage(page)
    --栈里存在该page，直接动画切到该page
    if index > 0 then
        page:removeFromSuper()
        window:addView(page)
        self:startAnim(page, false)
        return
    end
    --栈不存在该page，添加
    if page then
        ---如果没有设置宽度或高度，则默认屏幕宽高
        if page:width() == 0 and page:widthPercent() == 0 then
            page:width(window:width())
        end
        if page:height() == 0 and page:heightPercent() == 0 then
            page:height(window:height())
        end
        table.insert(self._pageStack, page)
        page:positionType(PositionType.ABSOLUTE)
        window:addView(page)
        self:startAnim(page, false)
    end
end

function _class:willPushCallback(page, func)
    self._willPushCache[page] = func
end

function _class:didPushCallback(page, func)
    self._didPushCache[page] = func
end

--- 退出栈顶页面
function _class:popPage(page)
    if not page then
        local top = #self._pageStack
        page = self._pageStack[top]
    end
    self:startAnim(page, true)
end

function _class:willPopCallback(page, func)
    self._willPopCache[page] = func
end

function _class:didPopCallback(page, func)
    self._didPopCache[page] = func
end

-------------
--- @Private
-------------

function _class:indexOfPage(page)
    for i, v in ipairs(self._pageStack) do
        if page == v then return i end
    end
    return 0
end

function _class:startAnim(page, isPop)
    local from, to = window:width(), 0
    if isPop then from = 0 to = window:width() end

    if not isPop then --避免push动画闪烁
        page:hidden(true)
    end

    local anim = ObjectAnimation(AnimProperty.PositionX, page)
    anim:from(from):to(to):duration(0.3)
    if not isPop then --避免push动画闪烁
        anim:startBlock(function() page:hidden(false) end)
    end

    anim:finishBlock(function(_, finish)
        if not finish then return end
        self:callDidPushOrPopIfNeeded(page, isPop)
        if isPop then
            page:removeFromSuper()
            local index = self:indexOfPage(page)
            table.remove(self._pageStack, index)
        end
    end)

    self:callWillPushOrPopIfNeeded(page, isPop)
    anim:start()
end

function _class:callWillPushOrPopIfNeeded(page, isPop)
    if isPop then
        local func = self._willPopCache[page]
        if func and type(func) == "function" then func() end
    else
        local func = self._willPushCache[page]
        if func and type(func) == "function" then func() end
    end
end

function _class:callDidPushOrPopIfNeeded(page, isPop)
    if isPop then
        local func = self._didPopCache[page]
        if func and type(func) == "function" then func() end
    else
        local func = self._didPushCache[page]
        if func and type(func) == "function" then func() end
    end
end

return _class