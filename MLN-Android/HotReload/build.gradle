apply plugin: 'com.android.library'
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.17'
    }
}

apply plugin: 'com.google.protobuf'

android {
    compileSdkVersion project.compileSdkVersion
    buildToolsVersion project.buildToolsVersion

    defaultConfig {
        minSdkVersion project.minSdkVersion
        targetSdkVersion project.targetSdkVersion
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}


protobuf {
    protobuf {
        protoc {
            if (osdetector.os == "osx") {
                artifact = 'com.google.protobuf:protoc:3.0.0:osx-x86_64'
            } else {
                artifact = 'com.google.protobuf:protoc:3.0.0'
            }
        }
    }
    plugins {
        javalite {
            if (osdetector.os == "osx") {
                artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0:osx-x86_64'
            } else {
                artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'
            }
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                // In most cases you don't need the full Java output
                // if you use the lite output.
                remove java
            }
            task.plugins {
                javalite {}
            }
        }
    }
}

dependencies {
    compileOnly "com.google.protobuf:protobuf-lite:$protobufVersion"
}
if (!implementation_debug) {
    if (update_hello_group) {
        ext.versionForMomo = rootProject.ext.hotreloadVersion
        apply from: '../upload_maven.gradle'
    } else {
        apply from: "../bintrayUpload.gradle"
        version = hotreloadVersion
    }
}