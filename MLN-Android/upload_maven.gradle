apply plugin: 'maven'

//apply plugin: 'armeabi.compat'
if (upload_symbols) {
    apply plugin: 'rifle.symbols'

    symbolsConfig {
        appId = "157ddd13f75e8d7b926bbe3656dd83e4"
        appKey = "3f7d1703d4872e886261cb76c760bf7f"
    }
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

def getPackaging() {
    return hasProperty("POM_PACKAGING") ? POM_PACKAGING : "aar"
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                pom.groupId = GROUP
                pom.artifactId = ARTIFACT_ID
                pom.version = versionForMomo
                pom.project {
                    packaging getPackaging()
                }
                repository(url: RELEASE_REPOSITORY_URL) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
                snapshotRepository(url: SNAPSHOT_REPOSITORY_URL) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
            }
        }
    }
    if (project.getPlugins().hasPlugin('com.android.application') ||
            project.getPlugins().hasPlugin('com.android.library')) {
        task install(type: Upload, dependsOn: assemble) {
            repositories.mavenInstaller {
                configuration = configurations.archives

                pom.groupId = GROUP
                pom.artifactId = ARTIFACT_ID
                pom.version = versionForMomo

                pom.project {
                    packaging getPackaging()
                }
            }
        }
        task androidSourcesJar(type: Jar) {
            classifier = 'sources'
            from android.sourceSets.main.java.sourceFiles
        }
    } else {
        install {
            repositories.mavenInstaller {
                pom.groupId = GROUP
                pom.artifactId = ARTIFACT_ID
                pom.version = versionForMomo

                pom.project {
                    packaging getPackaging()
                }
            }
        }
        task sourcesJar(type: Jar, dependsOn: classes) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }
    }
    artifacts {
        if (project.getPlugins().hasPlugin('com.android.application') ||
                project.getPlugins().hasPlugin('com.android.library')) {
            archives androidSourcesJar
        } else {
            archives sourcesJar
        }
    }
}
