plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-kapt'
}

android {
    compileSdkVersion project.compileSdkVersion
    buildToolsVersion project.buildToolsVersion
    defaultConfig {
        minSdkVersion project.minSdkVersion
        targetSdkVersion project.targetSdkVersion
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [isSdk: 'true']
            }
        }
        externalNativeBuild {
            cmake {
                arguments '-DANDROID_TOOLCHAIN=clang -D'
                cppFlags "-frtti -fexceptions"
                cFlags "-pie -fPIE"
                abiFilters 'armeabi-v7a', 'arm64-v8a'
            }
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
        }
        release {
            minifyEnabled false
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    externalNativeBuild {
        cmake {
            path 'src/main/jni/CMakeLists.txt'
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
}

repositories {
    mavenCentral()
}
dependencies {
    compileOnly 'androidx.legacy:legacy-support-v4:1.0.0'
    compileOnly "androidx.recyclerview:recyclerview:$androidXVersion"
    compileOnly "androidx.appcompat:appcompat:$androidXVersion"
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.23.0'
    compileOnly "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    compileOnly "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines_version"
    compileOnly "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutines_version"
    implementation 'androidx.lifecycle:lifecycle-common:2.2.0'
    if (implementation_debug) {
        compileOnly project(":mlncore")
        compileOnly project(':HotReload')
        api project(':annotation')
        kapt project(':processor')
    } else {
        compileOnly "com.immomo.mlncore:core:$mlnCoreVersion"
        compileOnly "com.immomo.luanative:hotreload:$hotreloadVersion"
        api "com.immomo.mls:annotation:$annotationVersion"
        kapt "com.immomo.mls:processor:$processorVersion"
    }
}

if (!implementation_debug) {
    if (update_hello_group) {
        ext.versionForMomo = rootProject.ext.mlnsVersion
        apply from: '../upload_maven.gradle'
    } else {
        apply from: "../bintrayUpload.gradle"
        version = mlnsVersion
    }
}

apply from: 'muaGenerator.gradle'
